import { Process, Processor } from '@nestjs/bull';
import { Job } from 'bull';
import { EmailService } from './email.service';
import { Inject, Logger } from '@nestjs/common';
import { EmailLogService } from './email-log.service';
import { EEmailStatus } from './types/email-status.enum';
import { MAX_RETRIES } from './constants';
import { IEmailJob } from './types/email-job.interface';

@Processor('emailQueue')
export class EmailProcessor {
  private readonly logger = new Logger(EmailProcessor.name);

  constructor(
    private readonly emailService: EmailService,
    private readonly emailLogService: EmailLogService,
    @Inject(MAX_RETRIES) private readonly maxRetries: number,
  ) {}

  @Process()
  async handleEmail(job: Job<IEmailJob>) {
    const { logId, ...email } = job.data;

    this.logger.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ ${email.to}`);

    await this.emailLogService.updateStatus(logId, EEmailStatus.PENDING);

    try {
      await this.emailService.sendEmail(email);
      await this.emailLogService.updateStatus(logId, EEmailStatus.SENT);
      this.logger.log(`‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${email.to}`);
    } catch (error) {
      if (job.attemptsMade < this.maxRetries) {
        await this.emailLogService.incrementRetryCount(logId);

        console.warn(
          `‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${job.attemptsMade + 1}/${this.maxRetries}`,
        );

        throw error; // –ü–æ–∑–≤–æ–ª—è–µ—Ç Bull –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É
      } else {
        await this.emailLogService.updateStatus(
          logId,
          EEmailStatus.FAILED,
          error.message,
        );
        console.error(
          `‚ùå Email –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${email.to}, –æ—à–∏–±–∫–∞: ${error.message}`,
        );
      }
    }
  }
}
